mat[5,]
mat[,1]
mat*10
data1 = read.csv(file.choose(), header=TRUE)
data1
data2 = read.table(file.choose(), header=T, sep=",")
data2
data3 = read.delim(file.choose(), header=T)
data3
data4 = read.table(file.choose(), header=T, sep=",")
data4
rm data4
rm(data4)
rm(data3)
data3 = read.delim(file.choose(), header=T)
data3
data4 = read.table(file.choose(), header=T, sep="\t")
data4
data5 <- read.delim("~/Desktop/S&P500txt.txt")
View(data5)
dim(data5)
head(data5)
tail(data5)
tail(data5[c(5,6,7,8,9), ]
data5[c(5,6,7,8,9)]
data5[c(5,6,7,8,9), ]
data5[5:9, ]
data5[-(4:722), ]
names(data5)
mean(data5$Volume)
mean(data5$Close)
attach(data5)
mean(High)
mean(Low)
mean(Close)
detach(data5)
Close
attach(data5)
names(data5)
class(data5)
class(Ticker)
class(Open)
class(High)
levels(Ticker)
levels(High)
summary(data5)
x = c(0,1,1,1,0,0,0,0,0,0)
class(x)
summary(x)
x = as.factor(x)
class(x)
summary(x)
header(data5)
head(data5)
names(data5)
mean(Close[Ticker=="AAPL"])
mean(Close[Ticker=="S"])
mean(Close[Ticker=="BAC"])
mean(Close[Ticker=="C"])
mean(Close[Ticker=="CHASE"])
mean(Close[Ticker=="JPM"])
mean(Close[Ticker=="GOOG"])
mean(Close[Ticker=="FB"])
mean(Close[Ticker=="F"])
mean(Close[Ticker=="AFL"])
AFLData = Data5[Ticker=="AFL, "]
AFLData = data5[Ticker=="AFL, "]
AFLData
AFLData = data5[Ticker=="AFL", ]
AFLData
dim(AFLdata)
dim(AFLData)
summary(AFLData)
AFLOver51 = data5[Ticker=="AFL" & Close > 50]
AFLOver51 = data5[Ticker=="AFL" & Close > 50, ]
dim(AFLOver51)
AFLOver51 = data5[Ticker=="AFL" & Close > 51, ]
dim(AFLOver51)
AFLOver55 = data5[Ticker=="AFL" & Close > 55, ]
dim(AFLOver55)
AFLOver55
Close[1:5]
temp = Age>46
temp = Close>46
temp[1:5]
temp = as.numeric(Close>46)
temp
temp[1:5]
temp[1:5, ]
AFLData[1:5, ]
MoreData = cbind(data5, AFLData)
PriceOver55 = Close > 55
MoreData = cbind(data5, PriceOver55)
MoreData[1:10]
MoreData[1:10, ]
getwd
getwd()
save.image("RTutorials.Rdata")
rm(list=ls())
q()
setwd("~/")
getwd()
load("RTutorias.Rdata")
load("RTutorials.Rdata")
install.packages("epiR")
install.packages()
library(epiR)
help(package = epiR)
table(Ticker)
attach(data5)
table(Ticker)
count = table(Ticker)
count
count/10989
names(data5)
head(data5)
pricevar = high - low
names(data5)
pricevar = High - Low
pricevar
clear
data6 = cbind(data5, pricevar)
names(data5)
names(data6)
head(data5)
pricevarHL = pricevar
rm(pricevar)
table(Ticker = ABBV)
table(Ticker = "ABBV")
boxplot(Volume)
boxplot(Open)
boxplot(PriceOver55)
boxplot(pricevarHL)
max(pricevarHL)
mean(pricevarHL)
median(pricevarHL)
help(hist)
hist(pricevarHL, freq=F, ylim=c(0, .2), breaks=14, main="S&P 500", xlab="Volume")
hist(pricevarHL, freq=F, ylim=c(0, .2), breaks=14, main="S&P 500", xlab="Price Variance")
hist(pricevarHL, freq=F, ylim=c(0, .4), breaks=14, main="S&P 500", xlab="Price Variance")
hist(pricevarHL, prob=T, ylim=c(0, .4), breaks=14, main="S&P 500", xlab="Price Variance")
hist(pricevarHL, prob=T, ylim=c(0, .25), breaks=14, main="S&P 500", xlab="Price Variance")
hist(AFLData, prob=T, ylim=c(0, .25), breaks=14, main="S&P 500", xlab="Price Variance")
AFLData
hist(AFLData$Close, prob=T, ylim=c(0, .25), breaks=14, main="S&P 500", xlab="Price Variance")
stem(PriceOver55)
stem(pricevarHL)
.449/5
datarate = .449/5
datarate*31
datarate = .604/5
datarate*31
6.99+1.00
7.99*.065
7.99+.52
7.99*.060
6.95+1
7.95*.060
7.95+.477
7.95*.065
7.95+.52
123456123456/7
123456123456/6
123456123456/5
123456/7
123456123456/7
17636589065*7
123456123456 mod 7
123456123456 modulo 7
help(modulus)
??modulus
123456123456 % 7
123456123456 %% 7
123456123456 %% 8
123456123456 %% 5
123456123456 %% 4
123456123456 %% 3
123456123456 %% 2
123456123456 %% 13
clear
library(rjson)
json_file = "/Users/mashhoodsyed/Documents/JHU MSCS/Data Science/Datasets/Stanford/pizza_request_dataset/pizza_request_dataset.json"
json_data = fromJSON(paste(readLines(json_file), collapse""))
json_data = fromJSON(paste(readLines(json_file), collapse""))
head(json_file)
json_data = fromJSON(paste(readLines(json_file)))
json_data = fromJSON(file=json_file, unexpected.escape= "error")
head(json_data)
names(json_data)
attach(json_data)
str(json_data)
library(jsonlite)
import(jsonlite)
install.packages("jsonlite")
library(jsonlite)
data1 = (json_file)
names(data1)
names(json_data)
json_data
q()
View(AFLData)
View(AFLOver51)
View(AFLOver55)
library(rjson)
my.JSON = fromJSON(file = "/Users/mashhoodsyed/Documents/JHU MSCS/Data Science/Datasets/Stanford/pizza_request_dataset/pizzasample2.json")
my.JSON = fromJSON(file = "/Users/mashhoodsyed/Documents/JHU MSCS/Data Science/Datasets/Stanford/pizza_request_dataset/pizzasample2.json")
my.JSON = fromJSON(file = "/Users/mashhoodsyed/Documents/JHU MSCS/Data Science/Datasets/Stanford/pizza_request_dataset/pizzasample2.json")
df <- lapply(my.JSON, function(play) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(play), ncol=33, byrow=T))
})
??play
??lapply
df <- do.call(rbind, df)
colnames(df) <- names(my.JSON[[1]][[1]])
rownames(df) <- NULL
df
load("~/Downloads/davis.RData")
davis
help(data.frame)
data1 = read.csv(file.choose())
data1 = read.csv(file.choose(), header=T)
view(data1)
data1
6.5+8
14.5/6
getwd()
getwd()
setwd("~/")
dataFile = file.choose()
wilt = read.csv(dataFile, header=TRUE)
View(wilt)
data$classlabel = factor(data$class, levels=c('n', 'w'), labels=c(0,1))
library(arm)
library(dplyr)
?as.factor
as.factor(data$class)
wilt$classlabel = factor(wilt$class, levels=c('n', 'w'), labels=c(0,1))
View(wilt)
attach(wilt)
wilt.1 = glm(classlabel ~ Mean_Green, family=binomial(link="logit"), data=wilt)
display(wilt.1, digits=4)
wilt.2 = glm(classlabel ~ Mean_Red, family=binomial(link="logit"), data=wilt)
display(wilt.2, digits=4)
-0.0455/4
coef(wilt.2[1])
coef(wilt.2[1])*1
coef(wilt.2[1])*2
coef(wilt.2[1])/4
coef(wilt.2[1])*4
coef(wilt.2[2])*4
coef(wilt.2[2])
coef(wilt.2[1])
coef(wilt.2[1])/4
coef(wilt.2[1])
wilt.3 = glm(classlabel ~ Mean_NIR, family=binomial(link="logit"), data=wilt)
display(wilt.3, digits=4)
wilt.3x = glm(classlabel ~ Mean_NIR + Mean_Green, family=binomial(link="logit"), data=wilt)
display(wilt.3x)
wilt.3x
print(wilt.3x)
-.003049*416
-.003049*595
3.821044 - 1.814155
205*.029979
.04/1
.04/.01
749 - 674
display(wilt.3x, digits = 5)
file.choose()
schooldata = file.choose()
read.table(schooldata, header=TRUE)
smokingdata = file.choose()
read.table(smokingdata, header=TRUE)
unemploymentdata = file.choose()
unemp_data = read.table(unemploymentdata, header=TRUE)
View(unemp_data)
ideology = file.choose()
ideo_data = read.table(ideology, header=TRUE)
View(ideo_data)
View(ideo_data)
remove(ideo_data)
remove(unemp_data)
remove(ideology)
remove(schooldata)
remove(smokingdata)
remove(unemploymentdata)
pilots = file.choose()
pilot_data = read.table(pilots, header=TRUE)
View(pilot_data)
?arm
??arm
cd4 = file.choose()
read.csv(cd4, header=TRUE)
cd4data = read.csv(cd4, header=TRUE)
View(cd4data)
congress = file.choose
congress = file.choose()
chicks = file.choose()
chicksdata = read.table(chicks, header=TRUE)
View(chicksdata)
View(cd4data)
earnings = file.choose()
earnings_data = read.table(earnings, header=TRUE)
View(earnings_data)
remove(cd4data)
remove(earnings_data)
remove(chicksdata)
remove(pilot_data)
earnings = file.choose()
earningsdata = read.table(earnings, header=TRUE)
lightspeed = file.choose()
ldata = read.table(lightspeed, header=TRUE)
ldata = read.table(lightspeed, header=FALSE)
simulation = file.choose()
s_data = read.table(simulation, header=TRUE)
View(s_data)
roaches = file.choose()
roachdata = read.csv(roaches, header=TRUE)
View(roachdata)
binary = file.choose(0
binary = file.choose(0)
binary = file.choose()
bdata = read.table(binary, header=TRUE)
View(bdata)
mydata = read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
head(mydata)
remove(bdata)
remove(mydata)
remove(s_data)
remove(roachdata)
remove(binary)
remove(cd4)
remove(chicks)
remove(dataFile)
getwd()
setwd("~/PS4")
getwd()
setwd("~/Desktop/PS4")
setwd("~/Desktop/PS4")
zooFile = file.choose()
zoo = read.table(zooFile, header=FALSE)
View(zoo)
zoo = read.csv(zooFile, header=FALSE)
View(zoo)
View(zoo)
colnames(zoo) = c("Animal Name", "Hair", "Feathers", "Eggs", "Milk", "Airborne", "Aquatic", "Predator", "Toothed", "Backbone", "Breathers", "Venomous", "Fins", "Legs", "Tail", "Domestic", "Catsize", "Type")
View(zoo)
library("arm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fit.1 = lm(Predator ~ Legs)
attach(zoo)
fit.1 = lm(Predator ~ Legs)
describe.fit(fit.1, digits = 4)
display(fit.1, digits = 4)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(aes(x=Legs, y=mean(Predator)) + geom_point()
ggplot(aes(x=Legs, y=mean(Predator))) + geom_point()
ggplot(aes(x=Legs, y=mean(Predator))) + geom_point()
ggplot(data=zoo, aes(x=Legs, y=mean(Predator))) + geom_point()
legsGrouped = round(Legs/2, 0)
grouped_Legs = summarize(group_by(zoo, legsGrouped), proportion = mean(Predator))
invlogit(0)
zoo.1 = glm(Predator ~ Legs, family = binomial(link = "logit"))
display(zoo.1, digits = 4)
zoo.2 = glm(formula = Predator ~ Tail, family = binomial(link = "logit"))
display(zoo.2, digits = 4)
zoo.3 = glm(formula = Predator ~ Venomous, family = binomial(link = "logit"))
display(zoo.3, digits = 4)
.15 + 94
zoo.4 = glm(formula = Predator ~ Venomous, family = binomial(link = "logit"))
display(zoo.4, digits = 4)
zoo.4 = glm(formula = Predator ~ Toothed, family = binomial(link = "logit"))
display(zoo.4, digits = 4)
mean(Legs)
Intercept = .5044
Coeff_Est_of_Legs = -.0998
Mean_value_of_Legs = 2.84
mean_eval = Intercept - Coeff_Est_of_Legs*Mean_value_of_Legs
Div_4 = Coeff_Est_of_Legs / 4
mean_eval_of_Legs = mean_eval
remove(mean_eval)
Div_4_Legs = Coeff_Est_of_Legs / 4
remove(Div_4)
Std_error = .1000
Std_error_of_Legs = .1000
remove(Std_error)
95_conf__bottom_Legs = Coeff_Est_of_Legs - 2*Std_error_of_Legs
conf__bottom_Legs = Coeff_Est_of_Legs - 2*Std_error_of_Legs
conf__top_Legs = Coeff_Est_of_Legs + 2*Std_error_of_Legs
conf__bottom_Legs = (Coeff_Est_of_Legs - 2*Std_error_of_Legs) / 4
conf__top_Legs = (Coeff_Est_of_Legs + 2*Std_error_of_Legs) / 4
Intercept_Legs = .5044
display(zoo.2)
Mean_value_of_Tail = mean(Tail)
Intercept_Tail = .15
Coeff_Est_of_Tail = .09
Mean_value_of_Tail = mean(Tail)
Std_error_of_Tail = .46
conf__bottom_Tail = (Coeff_Est_of_Tail - 2*Std_error_of_Tail) / 4
conf__top_Tail = (Coeff_Est_of_Tail + 2*Std_error_of_Tail) / 4
mean_eval_of_Tail = Intercept_Tail - Coeff_Est_of_Tail*Mean_value_of_Tail
Div_4_Tail = Coeff_Est_of_Tail / 4
display(zoo.3)
Intercept_Venomous = .15
Coeff_Est_of_Venomous = .95
Mean_value_of_Venomous = mean(Venomous)
Std_error_of_Venomous = .84
conf__bottom_Venomous = (Coeff_Est_of_Venomous - 2*Std_error_of_Venomous) / 4
conf__top_Venomous = (Coeff_Est_of_Venomous + 2*Std_error_of_Venomous) / 4
mean_eval_of_Venomous = Intercept_Venomous - Coeff_Est_of_Venomous*Mean_value_of_Venomous
Div_4_Venomous = Coeff_Est_of_Venomous / 4
display(Toothed)
display(zoo.4)
Intercept_Toothed = -.10
Coeff_Est_of_Toothed = .53
Mean_value_of_Toothed = mean(Toothed)
Std_error_of_Toothed = .41
conf__bottom_Toothed = (Coeff_Est_of_Toothed - 2*Std_error_of_Toothed) / 4
conf__top_Toothed = (Coeff_Est_of_Toothed + 2*Std_error_of_Toothed) / 4
mean_eval_of_Toothed = Intercept_Toothed - Coeff_Est_of_Toothed*Mean_value_of_Toothed
Div_4_Toothed = Coeff_Est_of_Toothed / 4
zoo.5 = glm(formula = Predator ~ Legs + Tail, family = binomial(link = "logit"))
display(zoo.5, digits = 4)
zoo.5 = glm(formula = Predator ~ Legs + Tail + Venomous, family = binomial(link = "logit"))
display(zoo.5, digits = 4)
zoo.5 = glm(formula = Predator ~ + Tail + Venomous, family = binomial(link = "logit"))
display(zoo.5, digits = 4)
zoo.5 = glm(formula = Predator ~ + Tail + Venomous + Toothed, family = binomial(link = "logit"))
display(zoo.5, digits = 4)
zoo.5 = glm(formula = Predator ~ + Venomous + Toothed, family = binomial(link = "logit"))
display(zoo.5, digits = 4)
zoo.5 = glm(formula = Predator ~ + Venomous + Toothed, family = binomial(link = "logit"))
log_odds = cbind(1, mean(Venomous), mean(Toothed) %*% zoo.5$coef
log_odds = cbind(1, mean(Venomous), mean(Toothed)) %*% zoo.5$coef
log_odds = cbind(1, mean(Venomous), mean(Toothed)) %*% zoo.5$coef
invlogit(log_odds)
display(zoo.5)
((coef(zoo.5)["Venomous"] * sd(Venomous))/4) * 100
((coef(zoo.5)["Toothed"] * sd(Toothed))/4) * 100
zoo.6 = glm(Predator ~ + Venomous + Toothed + Toothed:Venomous, family = binomial(link = "logit"))
display(zoo.6)
log_odds.6 = cbind(1, mean(Venomous), mean(Toothed), Venomous*Toothed) %*% coef(zoo.6)
invlogit(log_odds.6)
log_odds.6 = cbind(1, mean(Venomous), mean(Toothed), mean(Venomous)*mean(Toothed)) %*% coef(zoo.6)
invlogit(log_odds.6)
zoo.1a = glm(Predator ~ Hair, family = binomial(link = "logit"))
display(zoo.1a, digits = 4)
zoo.2a = glm(Predator ~ Backbone, family = binomial(link = "logit"))
display(zoo.2a, digits = 4)
zoo.3a = glm(Predator ~ Breathers, family = binomial(link = "logit"))
display(zoo.3a, digits = 4)
zoo.all4 = glm(formula = Predator ~ Legs + Tail + Venomous + Toothed, family = binomial(link = "logit"))
display(zoo.all4, digits = 4)
Intercept_Hair = .4925
Coeff_Est_of_Hair = -.6322
Mean_value_of_Hair = mean(Hair)
Std_error_of_Hair = .4083
conf__bottom_Hair = (Coeff_Est_of_Hair - 2*Std_error_of_Hair) / 4
conf__top_Hair = (Coeff_Est_of_Hair + 2*Std_error_of_Hair) / 4
mean_eval_of_Hair = Intercept_Hair - Coeff_Est_of_Hair*Mean_value_of_Hair
Div_4_Hair = Coeff_Est_of_Hair / 4
Intercept_Backbone = .0000
Coeff_Est_of_Backbone = .2666
Mean_value_of_Backbone = mean(Backbone)
Std_error_of_Backbone = .5208
conf__bottom_Backbone = (Coeff_Est_of_Backbone - 2*Std_error_of_Backbone) / 4
conf__top_Backbone = (Coeff_Est_of_Backbone + 2*Std_error_of_Backbone) / 4
mean_eval_of_Backbone = Intercept_Backbone - Coeff_Est_of_Backbone*Mean_value_of_Backbone
Div_4_Backbone = Coeff_Est_of_Backbone / 4
Intercept_Breathers = 1.4469
Coeff_Est_of_Breathers = -1.4969
Mean_value_of_Breathers = mean(Breathers)
Std_error_of_Breathers = .5990
conf__bottom_Breathers = (Coeff_Est_of_Breathers - 2*Std_error_of_Breathers) / 4
conf__top_Breathers = (Coeff_Est_of_Breathers + 2*Std_error_of_Breathers) / 4
mean_eval_of_Breathers = Intercept_Breathers - Coeff_Est_of_Breathers*Mean_value_of_Breathers
Div_4_Breathers = Coeff_Est_of_Breathers / 4
zoo.7 = glm(formula = Predator ~ + Breathers + Backbone, family = binomial(link = "logit"))
log_odds = cbind(1, mean(Breathers), mean(Backbone)) %*% zoo.7$coef
zoo.5 = glm(formula = Predator ~ + Venomous + Toothed, family = binomial(link = "logit"))
log_odds5 = cbind(1, mean(Venomous), mean(Toothed)) %*% zoo.5$coef
invlogit(log_odds5)
zoo.7 = glm(formula = Predator ~ + Breathers + Backbone, family = binomial(link = "logit"))
log_odds7 = cbind(1, mean(Breathers), mean(Backbone)) %*% zoo.7$coef
invlogit(log_odds7)
display(zoo.5, digits = 4)
display(zoo.7, digits = 4)
((coef(zoo.7)["Backbone"] * sd(Backbone))/4) * 100
((coef(zoo.7)["Breathers"] * sd(Breathers))/4) * 100
quartz(title="Venomous vs. Predator")
plot(Venomous, Predator,xlab="Venomous",ylab="Probability of Being a Predator") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(Predator~Venomous,family=binomial) #
curve(predict(g,data.frame(Venomous=x),type="resp"),add=TRUE)
points(Venomous,fitted(g),pch=20)
quartz(title="Toothed vs. Predator") # creates a quartz window with title
plot(Toothed, Predator,xlab="Toothed",ylab="Probability of Being a Predator") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(Predator~Toothed,family=binomial) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(Toothed=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(Toothed,fitted(g),pch=20) # optional: you could skip this draws an invisible set of points of body size survival based on a 'fit' to glm model. pch= changes type of dots.
quartz(title="Legs vs. Predator") # creates a quartz window with title
plot(Legs, Predator,xlab="Legs",ylab="Probability of Being a Predator") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(Predator~Legs,family=binomial) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(Legs=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(Legs,fitted(g),pch=20) # optional: you could skip this draws an invisible set of points of body size survival based on a 'fit' to glm model. pch= changes type of dots.
plot(Legs, Predator,xlab="Legs",ylab="Probability of Being a Predator") # plot with body size on x-axis and survival (0 or 1) on y-axis
g=glm(Predator~Legs,family=binomial) # run a logistic regression model (in this case, generalized linear model with logit link). see ?glm
curve(predict(g,data.frame(Legs=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(Legs,fitted(g),pch=20)
remove(Intercept)
